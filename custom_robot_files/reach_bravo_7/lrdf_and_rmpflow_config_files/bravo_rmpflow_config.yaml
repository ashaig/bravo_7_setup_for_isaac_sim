# Copyright (c) 2019-2022, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

# Artificially limit the robot joints.  For example:
# A joint with range +-pi would be limited to +-(pi-.01)
#joint_limit_buffers: [.01, .01, .01, .01, .01, .01, .0001]
joint_limit_buffers: [.01, .01, .01, .01, .01, .01]

# RMPflow has many modifiable parameters, but these serve as a great start.
# Most parameters will not need to be modified
rmp_params:
    cspace_target_rmp:
        metric_scalar: 50.0 #75.0 #5.0 #0.0 #50.
        position_gain: 100.
        damping_gain: 50.0 #500.0 #50.
        robust_position_term_thresh: .5
        inertia: 1.0 #1000000.0 #100.0 #10.0 #1.
    cspace_trajectory_rmp:
        p_gain: 100.
        d_gain: 10.
        ff_gain: .25
        weight: 50.
    cspace_affine_rmp:
        final_handover_time_std_dev: .25
        weight: 2000.
    joint_limit_rmp:
        metric_scalar: 10.0 #100.0 #100000.0 #10000.0 #1000.0 #0.0 #1000.
        metric_length_scale: .01
        metric_exploder_eps: 1e-3
        metric_velocity_gate_length_scale: .01
        accel_damper_gain: 200.0 #20000.0 #2000.0 #200.
        accel_potential_gain: 1.
        accel_potential_exploder_length_scale: .1
        accel_potential_exploder_eps: 1e-2
    joint_velocity_cap_rmp:
        max_velocity: 1.0 #1.5 #2.0 #1.0 #2.0 #1.0 #4.
        velocity_damping_region: 1.0 #1.5 #2.0 #1.5 #0.5 #2.0 #1.5 #1.0 #0.3 #1.5
        damping_gain: 10000.0 #1000.0
        metric_weight: 100.0 #0.0 #100.
    target_rmp:
        accel_p_gain: 2800.0 #2850.0 #2900.0 #2750.0 #2500.0 #2000.0 #1000.0 #3000.0 #500.0 #3000.0 #300. #30.
        accel_d_gain: 200.0 #2000.0 #200.0 #10.0 #100.0 #200.0 #500.0 #850.0 #85.
        accel_norm_eps: 0.001 #0.0001 #0.001 #0.01 #0.001 #.075
        metric_alpha_length_scale: 1000.0 #1.0 #1000.0 #.05
        min_metric_alpha: 10.0 #100.0 #10.0 #0.01 #10.0 #0.1 #0.01 #0.0 #.01
        max_metric_scalar: 100000 #66600 #50000 #100000 #1000 #10000
        min_metric_scalar: 2500 #25000 #250 #2500
        proximity_metric_boost_scalar: 0.5 #0.4 #0.5 #0.1 #1.0 #20.0 #1.0 #20.0 #1.0 #20.
        proximity_metric_boost_length_scale: 0.2 #1.0 #0.2 #20.0 #2.0 #0.2 #.02
        xi_estimator_gate_std_dev: 20000.0 #2000000.0 #200.0 #2000.0 #20000.
        accept_user_weights: false
    axis_target_rmp:
        accel_p_gain: 3000.0 #2100.0 #210.
        accel_d_gain: 1000.0 #600.0 #60.
        metric_scalar: 10.0 #9.0 #7.5 #5.0 #20.0 #10.0 #100.0 #1.0 #10.0 #0.0 #10
        proximity_metric_boost_scalar: 1010.0 #900.0 #1010.0 #1000.0 #1095.0 #1090.0 #1075.0 #1050.0 #1100.0 #1000.0 #500.0 #3000.0 #300.0 #1.0 #100.0 #3000.0 #30000.0 #300.0 #3000.
        proximity_metric_boost_length_scale: 0.1 #0.08 #0.1 #.08
        xi_estimator_gate_std_dev: 20000.
        accept_user_weights: false
    collision_rmp:
        damping_gain: 50.
        damping_std_dev: .04
        damping_robustness_eps: 1e-2
        damping_velocity_gate_length_scale: .01
        repulsion_gain: 800.
        repulsion_std_dev: .01
        metric_modulation_radius: .5
        metric_scalar: 10000.0 #0.0 #10000.
        metric_exploder_std_dev: .02
        metric_exploder_eps: .001
    damping_rmp:
        accel_d_gain: 30.0 #1000.0 #30.
        metric_scalar: 100.0 #10000.0 #50.0 #1000.0 #100.0 #10.0 #0.0 #50.
        inertia: 100.0 #0.1 #10.0 #1000000.0 #100.0 #1.0 #1000000.0 #100.

canonical_resolve:
    max_acceleration_norm: 45.0 #40.0 #25.0 #500.0 #5.0 #50.
    projection_tolerance: .01
    verbose: false


# body_cylinders are used to promote self-collision avoidance between the robot and its base
# The example below defines the robot base to be a capsule defined by the absolute coordinates pt1 and pt2.
# The semantic name provided for each body_cylinder does not need to be present in the robot URDF.
body_cylinders:
     - name: base
       pt1: [0,0,.333]
       pt2: [0,0,0.]
       radius: .05


# body_collision_controllers defines spheres located at specified frames in the robot URDF
# These spheres will not be allowed to collide with the capsules enumerated under body_cylinders
# By design, most frames in industrial robots are kinematically unable to collide with the robot base.
# It is often only necessary to define body_collision_controllers near the end effector
body_collision_controllers:
     - name: bravo_a_link #bravo_lower_gripper_link #bravo_a_link #end_effector
       radius: .05












































